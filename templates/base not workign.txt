<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
    <meta charset="UTF-8">
    <title>Movie Rating Management</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    <link href='https://unpkg.com/boxicons@2.0.7/css/boxicons.min.css' rel='stylesheet'>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
<div class="sidebar close">
    <div class="logo-details">
        <i class='bx bxs-user' ></i>
        <span class="logo_name">Ravi</span>
    </div>
    <ul class="nav-links" id="language-list">
        <li>
            <div class="iocn-link">
                <a href="#">
                    <span class="link_name">Select Language</span>
                </a>
            </div>
            <ul class="sub-menu">
                <!-- Sidebar content will be dynamically generated -->
            </ul>
        </li>
        <!-- Other language options will be generated dynamically -->
    </ul>
</div>
<section class="home-section">
    <div class="home-content">
        <div class="left-content">
            <i class='bx bx-menu'></i>
            <span class="text">Movie Rating Management</span>
        </div>
        <button id="update-db-btn" class="update-db-btn">Update Database</button>
    </div>
    <div class="image-container" id="image-container">
        <img src="{{ url_for('static', filename='Hi boss.png') }}" alt="Image">
    </div>
    <div id="movie-table-container">
        <table class="movie-table">
            <!-- Table rows and columns go here -->
          </table>
    </div>
</section>
<!-- Update Database Dialog -->
<div id="update-db-dialog" class="update-db-dialog">
    <div class="dialog-content">
        <span class="close-btn">&times;</span>
        <label for="folder-path">Enter Folder Path:</label>
        <input type="text" id="folder-path" placeholder="e.g., D:\Torrent Downloads\English">
        <div class="dialog-buttons">
            <button id="usual-btn" class="usual-dialog-btn">Update</button>
            <button class="close-dialog-btn">Close</button>
        </div>
    </div>
</div>

<!-- Update Database Dialog -->
<div id="update-db-dialog" class="update-db-dialog">
    <div class="dialog-content">
        <span class="close-btn">&times;</span>
        <label for="folder-path">Enter Folder Path:</label>
        <input type="text" id="folder-path" placeholder="e.g., D:\Torrent Downloads\English">
        <div class="dialog-buttons">
            <button id="usual-btn" class="usual-dialog-btn">Update</button>
            <button class="close-dialog-btn">Close</button>
        </div>
	<div id="progress-bar-container" class="progress-bar-container">
            <div id="progress-bar" class="progress-bar"></div>
            <span id="progress-label" class="progress-label"></span>
        </div>
        <div id="files-processed" class="files-processed"></div>
    </div>
</div>



<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Fetch languages and dynamically generate sidebar menu
        fetch('/languages')
            .then(response => response.json())
            .then(languages => {
                const languageList = document.getElementById('language-list');
                languages.forEach(language => {
                    const listItem = document.createElement('li');
                    listItem.innerHTML = `
                        <div class="iocn-link">
                            <a href="#">
                                <i class='bx bx-collection'></i>
                                <span class="link_name">${language}</span>
                            </a>
                            <i class='bx bxs-chevron-down arrow'></i>
                        </div>
                        <ul class="sub-menu">
                            <li><a class="link_name" href="#">Genre</a></li>
                            <li><a href="#" onclick="fetchMovies('${language}', 'all')">All</a></li>
                        </ul>
                    `;
                    languageList.appendChild(listItem);

                    // Fetch and append genres
                    fetch(`/genres/${language}`)
                        .then(response => response.json())
                        .then(genres => {
                            const subMenu = listItem.querySelector('.sub-menu');
                            genres.forEach(genre => {
                                const genreItem = document.createElement('li');
                                genreItem.innerHTML = `<a href="#" onclick="fetchMovies('${language}', '${genre}')">${genre}</a>`;
                                subMenu.appendChild(genreItem);
                            });
                        });

                    // Toggle sidebar menu
                    listItem.querySelector('.arrow').addEventListener('click', (e) => {
                        let arrowParent = e.target.parentElement.parentElement;
                        arrowParent.classList.toggle("showMenu");
                    });
                });

                // Toggle sidebar
                const sidebarBtn = document.querySelector(".bx-menu");
                sidebarBtn.addEventListener("click", () => {
                    document.querySelector(".sidebar").classList.toggle("close");
                });
            });

        // Initialize variables and event listeners
        const updateDbBtn = document.getElementById('update-db-btn');
        const updateDbDialog = document.getElementById('update-db-dialog');
        const closeBtn = document.querySelector('.close-btn');
        const closeDialogBtns = document.querySelectorAll('.close-dialog-btn');
        const usualBtn = document.getElementById('usual-btn');
        const progressBar = document.getElementById('progress-bar');
        const progressLabel = document.getElementById('progress-label');
        const filesProcessed = document.getElementById('files-processed');

        let totalFiles = 0;
        let filesProcessedCount = 0;

        // Function to update progress bar
        function updateProgress() {
            progressBar.style.width = `${(filesProcessedCount / totalFiles) * 100}%`;
            progressLabel.textContent = `${filesProcessedCount}/${totalFiles}`;
            filesProcessed.textContent = `Files Processed: ${filesProcessedCount}`;

	    progressBar.style.width = `${(filesProcessedCount / totalFiles) * 100}%`;
  	    progressLabel.textContent = `${filesProcessedCount}/${totalFiles}`;
  	    filesProcessed.textContent = `Files Processed: ${filesProcessedCount}`;
        }

        // Event listener for update database button
        updateDbBtn.addEventListener('click', () => {
            updateDbDialog.style.display = 'block';
            // Reset progress bar and text
            totalFiles = 0;
            filesProcessedCount = 0;
            updateProgress();
        });

        // Event listener for close button
        closeBtn.addEventListener('click', () => {
            updateDbDialog.style.display = 'none';
        });

        // Event listeners for close dialog buttons
        closeDialogBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                updateDbDialog.style.display = 'none';
            });
        });

        // Event listener for usual button
        usualBtn.addEventListener('click', () => {
            let folderPath = document.getElementById('folder-path').value.trim();
            if (!folderPath) {
                folderPath = 'D:\\Torrent Downloads\\English'; // Assign default value if folderPath is empty
            }
            
            progressBarContainer.style.display = 'block'; // Show the progress bar container

            // Reset progress bar and text
            totalFiles = 0;
            filesProcessedCount = 0;
            updateProgress();
            // Call function to process files
            processFiles(folderPath);
        });

        // Event listener for folder path input change
        document.getElementById('folder-path').addEventListener('change', (event) => {
            const path = event.target.value;
            fetch('/update-database', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ folder_path: path })
            })
            .then(response => response.json())
            .then(data => {
                alert(data.message);
                updateDbDialog.style.display = 'none';
            });
        });

        // Function to set total files count
        function setTotalFilesCount(count) {
            totalFiles = count;
            updateProgress();
        }

        // Function to update files processed count
        function incrementFilesProcessedCount() {
            filesProcessedCount++;
            updateProgress();
        }

        // Function to process files
        function processFiles(folderPath) {
            fetch('/update-database', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ folder_path: folderPath })
            })
            .then(response => response.json())
            .then(data => {
                alert(data.message); // Display message from server
                // For demonstration purposes, assuming server returns total number of files to be processed
                totalFiles = data.totalFiles; // Update total files count
                updateProgress(); // Update progress bar initially
                // Simulate processing each file with a delay
                for (let i = 1; i <= totalFiles; i++) {
                    setTimeout(() => {
                        filesProcessedCount++; // Increment processed files count
                        incrementFilesProcessedCount(); // Update progress bar
                    }, i * 1000); // Delay each file processing by 1 second (1000 milliseconds)
                }
                // Hide progress bar container after processing is complete
                setTimeout(() => {
                    progressBarContainer.style.display = 'none';
                }, totalFiles * 1000); // Delay hiding progress bar by total processing time
            })
            .catch(error => {
                console.error('Error processing files:', error);
                // Handle error
            });
        }
    });

    // Function to fetch movies based on language and genre
    function fetchMovies(language, genre) {
        fetch(`/movies/${language}/${genre}`)
            .then(response => response.json())
            .then(movies => {
                const movieTableContainer = document.getElementById('movie-table-container');
                const imageContainer = document.getElementById('image-container');
                // Hide the image container
                imageContainer.style.display = 'none';
                movieTableContainer.innerHTML = `
                    <table class="movie-table">
                        <thead>
                            <tr>
                                <th onclick="sortTable(0)">Rating</th>
                                <th>Title</th>
                                <th>Director</th>
                                <th>Cast</th>
                                <th onclick="sortTable(4)">Runtime</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${movies.map(movie => `
                                <tr onclick="viewMovieDetails('${movie.title}')">
                                    <td>${movie.rating}</td>
                                    <td>${movie.title}</td>
                                    <td>${movie.directors}</td>
                                    <td>${movie.cast.split(',').slice(0, 2).join(', ')}</td>
                                    <td>${movie.runtime}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;
            });
    }

    // Function to view movie details
    function viewMovieDetails(title) {
        fetch(`/movie-details/${title}`)
            .then(response => response.json())
            .then(movie => {
                const dialog = document.getElementById('view-movie-dialog');
                const movieTitle = document.getElementById('movie-title');
                const castList = document.getElementById('cast-list');
                movieTitle.textContent = movie.title;
                castList.innerHTML = movie.cast.split(',').map(cast => `<li>${cast}</li>`).join('');
                dialog.style.display = 'block';
            });
    }

    // Event listener for close view dialog buttons
    const closeViewDialogBtns = document.querySelectorAll('.close-view-dialog-btn');
    closeViewDialogBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            document.getElementById('view-movie-dialog').style.display = 'none';
        });
    });

    // Sort table function
    let sortDirection = {};

    function sortTable(columnIndex) {
        const table = document.querySelector("table tbody");
        const rows = Array.from(table.rows);

        if (!sortDirection[columnIndex]) {
            sortDirection[columnIndex] = true;  // Initial sort direction: ascending
        } else {
            sortDirection[columnIndex] = !sortDirection[columnIndex];  // Toggle sort direction
        }

        rows.sort((a, b) => {
            const cellA = a.cells[columnIndex].innerText;
            const cellB = b.cells[columnIndex].innerText;

            let valueA, valueB;
            if (columnIndex === 0 || columnIndex === 4) {  // Numeric columns (Rating, Runtime)
                valueA = parseFloat(cellA);
                valueB = parseFloat(cellB);
            } else {  // Text columns
                valueA = cellA;
                valueB = cellB;
            }

            if (sortDirection[columnIndex]) {
                return valueA > valueB ? 1 : -1;
            } else {
                return valueA < valueB ? 1 : -1;
            }
        });

        rows.forEach(row => table.appendChild(row));
    }
</script>

</body>
</html>
